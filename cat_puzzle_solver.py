####################################
######   Cat Puzzle Solver    ######
######  Author: Hanqing Liu   ######
######   Date: Oct 6, 2020    ######
####################################
from itertools import product

""" Pieces """
a1 = [['A', '-', '-'], ['A', 'A', 'A'], ['A', '-', '-']]
a2 = [['-', 'A', '-'], ['-', 'A', '-'], ['A', 'A', 'A']]
a3 = [['-', '-', 'A'], ['A', 'A', 'A'], ['-', '-', 'A']]
a4 = [['A', 'A', 'A'], ['-', 'A', '-'], ['-', 'A', '-']]
a = [a1, a2, a3, a4]

b1 = [['B', 'B', 'B', 'B', 'B']]
b2 = [['B'], ['B'], ['B'], ['B'], ['B']]
# b3 = [['B', 'B', 'B', 'B', 'B']]
# b4 = [['B'], ['B'], ['B'], ['B'], ['B']]
# b = [b1, b2, b3, b4]
b = [b1, b2]

c1 = [['-', '-', 'C', 'C'], ['C', 'C', 'C', '-']]
c2 = [['C', '-'], ['C', 'C'], ['-', 'C'], ['-', 'C']]
c3 = [['-', 'C', 'C', 'C'], ['C', 'C', '-', '-']]
c4 = [['C', '-'], ['C', '-'], ['C', 'C'], ['-', 'C']]
c = [c1, c2, c3, c4]

d1 = [['D', 'D'], ['-', 'D'], ['D', 'D']]
d2 = [['D', 'D', 'D'], ['D', '-', 'D']]
d3 = [['D', 'D'], ['D', '-'], ['D', 'D']]
d4 = [['D', '-', 'D'], ['D', 'D', 'D']]
d = [d1, d2, d3, d4]

e1 = [['-', '-', 'E', '-'], ['E', 'E', 'E', 'E']]
e2 = [['-', 'E'], ['E', 'E'], ['-', 'E'], ['-', 'E']]
e3 = [['E', 'E', 'E', 'E'], ['-', 'E', '-', '-']]
e4 = [['E', '-'], ['E', '-'], ['E', 'E'], ['E', '-']]
e = [e1, e2, e3, e4]

f1 = [['-', 'F', 'F'], ['F', 'F', '-'], ['-', 'F', '-']]
f2 = [['F', '-', '-'], ['F', 'F', 'F'], ['-', 'F', '-']]
f3 = [['-', 'F', '-'], ['-', 'F', 'F'], ['F', 'F', '-']]
f4 = [['-', 'F', '-'], ['F', 'F', 'F'], ['-', '-', 'F']]
f = [f1, f2, f3, f4]

g1 = [['G', 'G', 'G'], ['-', 'G', 'G']]
g2 = [['G', 'G'], ['G', 'G'], ['G', '-']]
g3 = [['G', 'G', '-'], ['G', 'G', 'G']]
g4 = [['-', 'G'], ['G', 'G'], ['G', 'G']]
g = [g1, g2, g3, g4]

h1 = [['-', 'H', '-'], ['H', 'H', 'H'], ['-', 'H', '-']]
# h2 = [['-', 'H', '-'], ['H', 'H', 'H'], ['-', 'H', '-']]
# h3 = [['-', 'H', '-'], ['H', 'H', 'H'], ['-', 'H', '-']]
# h4 = [['-', 'H', '-'], ['H', 'H', 'H'], ['-', 'H', '-']]
# h = [h1, h2, h3, h4]
h = [h1]

i1 = [['I', '-', '-', '-'], ['I', 'I', 'I', 'I']]
i2 = [['-', 'I'], ['-', 'I'], ['-', 'I'], ['I', 'I']]
i3 = [['I', 'I', 'I', 'I'], ['-', '-', '-', 'I']]
i4 = [['I', 'I'], ['I', '-'], ['I', '-'], ['I', '-']]
i = [i1, i2, i3, i4]

j1 = [['J', '-', '-'], ['J', 'J', '-'], ['-', 'J', 'J']]
j2 = [['-', '-', 'J'], ['-', 'J', 'J'], ['J', 'J', '-']]
j3 = [['J', 'J', '-'], ['-', 'J', 'J'], ['-', '-', 'J']]
j4 = [['-', 'J', 'J'], ['J', 'J', '-'], ['J', '-', '-']]
j = [j1, j2, j3, j4]

k1 = [['-', '-', 'K'], ['K', 'K', 'K'], ['K', '-', '-']]
k2 = [['K', 'K', '-'], ['-', 'K', '-'], ['-', 'K', 'K']]
# k3 = [['-', '-', 'K'], ['K', 'K', 'K'], ['K', '-', '-']]
# k4 = [['K', 'K', '-'], ['-', 'K', '-'], ['-', 'K', 'K']]
# k = [k1, k2, k3, k4]
k = [k1, k2]

l1 = [['-', '-', 'L'], ['-', '-', 'L'], ['L', 'L', 'L']]
l2 = [['L', 'L', 'L'], ['-', '-', 'L'], ['-', '-', 'L']]
l3 = [['L', 'L', 'L'], ['L', '-', '-'], ['L', '-', '-']]
l4 = [['L', '-', '-'], ['L', '-', '-'], ['L', 'L', 'L']]
l = [l1, l2, l3, l4]

# puzzle_combos = [a1, a2, a3, a4, b1, b2, b3, b4, c1, c2, c3, c4,
#                  d1, d2, d3, d4, e1, e2, e3, e4, f1, f2, f3, f4,
#                  g1, g2, g3, g4, h1, h2, h3, h4, i1, i2, i3, i4,
#                  j1, j2, j3, j4, k1, k2, k3, k4, l1, l2, l3, l4]
abcdefghijkl = [a, b, c, d, e, f, g, h, i, j, k, l]


""" Board """


board_height = 6
board_width = 10
rows = [0, 1, 2, 3, 4, 5]
cols = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
loc_combinations = list(product(rows, cols))

""" Function """
def put_a_piece_into_board(piece, loc):
    piece_height = len(piece)
    piece_width = len(piece[0])
    row_loc = loc[0]
    col_loc = loc[1]

    if loc[0] + piece_height <= board_height and loc[1] + piece_width <= board_width:
        for piece_row in piece:
            board[row_loc][col_loc: (col_loc + piece_height)] = piece_row
            row_loc += 1


""" Testing """
successes = []
# all_puzzles_combinations = list(product(a, b, c, d, e, f, g, h, i, j, k, l))
all_puzzles_combinations = list(product(a, b))

for combination in all_puzzles_combinations:
    board = [['-', '-', '-', '-', '-', '-', '-', '-', '-', '-'],
             ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-'],
             ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-'],
             ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-'],
             ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-'],
             ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-']]

    for piece in combination:
        print(piece)
    for row in range(6):
        for col in range(10):
            pass


for row in board:
    print(row)


""" Waiting for a supercomputer """
loc_col_1 = [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8), (2, 9), (3, 0), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9), (4, 0), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (5, 0), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5), (5, 6), (5, 7), (5, 8), (5, 9)]
loc_col_2 = [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8), (2, 9), (3, 0), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9), (4, 0), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (5, 0), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5), (5, 6), (5, 7), (5, 8), (5, 9)]
loc_col_3 = [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8), (2, 9), (3, 0), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9), (4, 0), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (5, 0), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5), (5, 6), (5, 7), (5, 8), (5, 9)]
loc_col_4 = [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8), (2, 9), (3, 0), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9), (4, 0), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (5, 0), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5), (5, 6), (5, 7), (5, 8), (5, 9)]
loc_col_5 = [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8), (2, 9), (3, 0), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9), (4, 0), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (5, 0), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5), (5, 6), (5, 7), (5, 8), (5, 9)]
loc_col_6 = [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8), (2, 9), (3, 0), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9), (4, 0), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (5, 0), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5), (5, 6), (5, 7), (5, 8), (5, 9)]
loc_col_7 = [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8), (2, 9), (3, 0), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9), (4, 0), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (5, 0), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5), (5, 6), (5, 7), (5, 8), (5, 9)]
loc_col_8 = [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8), (2, 9), (3, 0), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9), (4, 0), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (5, 0), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5), (5, 6), (5, 7), (5, 8), (5, 9)]
loc_col_9 = [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8), (2, 9), (3, 0), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9), (4, 0), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (5, 0), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5), (5, 6), (5, 7), (5, 8), (5, 9)]
loc_col_10 = [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8), (2, 9), (3, 0), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9), (4, 0), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (5, 0), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5), (5, 6), (5, 7), (5, 8), (5, 9)]
loc_col_11 = [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8), (2, 9), (3, 0), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9), (4, 0), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (5, 0), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5), (5, 6), (5, 7), (5, 8), (5, 9)]
loc_col_12 = [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8), (2, 9), (3, 0), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9), (4, 0), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (5, 0), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5), (5, 6), (5, 7), (5, 8), (5, 9)]


all_loc_combinations = list(product(loc_col_1, loc_col_2, loc_col_3, loc_col_4, loc_col_5, loc_col_6, loc_col_7, loc_col_8, loc_col_9, loc_col_10, loc_col_11, loc_col_12))

for row in all_loc_combinations:
    print(row)